/**
@defgroup Logger  Logger interface
@author Reiner Rohlfs UGE
@author Anja Bekkelien UGE

@brief This module provides a logger formatted specifically for CHEOPS.


The C++ logger provides a thin wrapper around the Boost Log library in order to 
provide developers with a uniform log interface.

<h2>Usage</h2>

To use this module, include the header file Logger.hxx in your code. This file defines a global <tt>logger</tt> object that is used to create log entries. Before using <tt>logger</tt>, make sure to call <tt>CheopsInit(argc, argv)</tt> from the main method. This method configures the log formatting and output channels.

The <tt>logger</tt> object takes input through the insertion operator, <tt>\<\<</tt>, which is overloaded to take specific data types as input depending on the log level. 
The first input must always be the log level, which is defined as an enum in the header file. NOTE: Every log entry <i>must</i> be terminated with <tt>std::endl</tt>, which triggers the entry's creation. 

Example usage:
@code
#include "Logger.hxx"
#include "ProgramParams.hxx"

using namespace std;

int main(int argc, char* argv[])
{
    ParamsPtr params = CheopsInit(argc, argv);

	logger << debug << "Log message" << " " << 1 << endl;
	logger << info << "Log message " << 2 << endl;
	logger << alert << 1000 << "An alert occurred!" << endl;
	logger << progress << 50 << endl;
	logger << warn << "Log message " << 4 << endl;
	logger << error << "Log message " << 6 << endl;

	params->CheopsExit();
	
    return 0;
}
@endcode

This code produces the following output to stdout:
@code
2015-05-07T16:07:17.568615 bekkelie.local TestLogger 0.0 [00000xac99]: [D] Log message 1
2015-05-07T16:07:17.569285 bekkelie.local TestLogger 0.0 [00000xac99]: [I] Log message 2
2015-05-07T16:07:17.569585 bekkelie.local TestLogger 0.0 [00000xac99]: [I] 1000 An alert occurred!
@endcode

to stderr:
@code
2015-05-07T16:07:17.569285 bekkelie.local TestLogger 0.0 [00000xac99]: [I] Log message 2
2015-05-07T16:07:17.569585 bekkelie.local TestLogger 0.0 [00000xac99]: [I] 1000 An alert occurred!
2015-05-07T16:07:17.569463 bekkelie.local TestLogger 0.0 [00000xac99]: [P] 50
2015-05-07T16:07:17.569517 bekkelie.local TestLogger 0.0 [00000xac99]: [W] Log message 4
2015-05-07T16:07:17.569649 bekkelie.local TestLogger 0.0 [00000xac99]: [E] Log message 5
@endcode

to file:
@code
2015-05-07T16:07:17.568615 bekkelie.local TestLogger 0.0 [00000xac99]: [D] Log message 1
2015-05-07T16:07:17.569285 bekkelie.local TestLogger 0.0 [00000xac99]: [I] Log message 2
2015-05-07T16:07:17.569585 bekkelie.local TestLogger 0.0 [00000xac99]: [I] 1000 An alert occurred!
2015-05-07T16:07:17.569463 bekkelie.local TestLogger 0.0 [00000xac99]: [P] 50
2015-05-07T16:07:17.569517 bekkelie.local TestLogger 0.0 [00000xac99]: [W] Log message 4
2015-05-07T16:07:17.569649 bekkelie.local TestLogger 0.0 [00000xac99]: [E] Log message 5
@endcode


Note that the alert log level has two special properties:
- creating an alert log entry will cause an email containing the entry to be sent to a TBD address. 
- because the alert level essentially provides information about the data used by the program, it is displayed as an info message (using [I]). 

<h3>Log files</h3>

Log files are only created if a job order was given as input argument to the 
program. The path to the log file can be defined in two different ways:

- By defining a dynamic processing parameter in the job order with the name 
  'Log_File', and setting its value to the desired path. If the file exists, logs 
  are appended to it.
- If the parameter 'Log_File' is not defined in the job order, the log file is 
  created in the job order's 'OUT' output directory. Each run of the program 
  creates a new log file.

<h2>Log level description</h2>

<table>
	<tr>
		<th>Log level</th>
		<th>Short name</th>
		<th>cout</th>
		<th>cerr</th>
		<th>Description</th>
		<th>Input</th>
	</tr>
	<tr>
		<td><b>debug</b></td>
		<td>D</td>
		<td><center>X</center></td>
		<td><center></center></td>
		<td>Basic software tracing messages.</td>
		<td>A text message that can be created from a combination of char*, string, integer and double.</td>
	</tr>	
	<tr>
		<td><b>info</b></td>
		<td>I</td>
		<td><center>X</center></td>		
		<td><center></center></td>		
		<td>Information about the operations or the status of the program.</td>
		<td>A text message that can be created from a combination of char*, string, integer and double.</td>
	</tr>
	<tr>
		<td><b>alert</b></td>
		<td>I</td>
		<td><center>X</center></td>		
		<td><center></center></td>		
		<td>An error was found in the data, which requires user action. The program may or may not be able to continue. An email containing the log record is sent to the appropriate address.</td>
		<td>First, a single integer that specifies the alert ID, then a text message that can be created from a combination of char*, string, integer and double.</td>
	</tr>	
	<tr>
		<td><b>progress</b></td>
		<td>P</td>
		<td><center></center></td>		
		<td><center>X</center></td>		
		<td>The progress of the program in percentage.</td>
		<td>A single integer between 0 and 100.</td>
	</tr>
	<tr>
		<td><b>warn</b></td>
		<td>W</td>
		<td><center></center></td>		
		<td><center>X</center></td>		
		<td>An error occurred but the program was able to continue.</td>
		<td>A text message that can be created from a combination of char*, string, integer and double.</td>
	</tr>	
	<tr>
		<td><b>error</b></td>
		<td>E</td>
		<td><center></center></td>		
		<td><center>X</center></td>		
		<td>An error occurred and the program was not able to continue.</td>
		<td>A text message that can be created from a combination of char*, string, integer and double.</td>
	</tr>
</table>

<h2>Log fields</h2>

Log records have the following fields, separated by a single blank character:

[Date] [Node name] [Process name] [Process version] [PID]: [Level] [Message text]

<table>
	<tr>
		<th>Field</th>
		<th>Description</th>
	</tr>
	<tr>
		<td>Date</td>
		<td>Formatted as yyyy-MM-ddThh:mm:ss.nnnnnn (26 characters).</td>
	</tr>
	<tr>
		<td>Node name</td>
		<td>The name retrieved through the <i>hostname</i> system call.</td>
	</tr>
	<tr>
		<td>Process name</td>
		<td>A string identifying the process.</td>
	</tr>
	<tr>
		<td>Process version</td>
		<td>The process' version.</td>
	</tr>
	<tr>
		<td>PID</td>
		<td>The process ID, formatted as [nnnnnnnnnn] (12 characters, including the square brackets).</td>
	</tr>
	<tr>
		<td>Level</td>
		<td>The log level, formatted as [L] where L indicates the first letter of the log level.</td>
	</tr>
	<tr>
		<td>Message text</td>
		<td>Variable length string.</td>
	</tr>
</table>

*/