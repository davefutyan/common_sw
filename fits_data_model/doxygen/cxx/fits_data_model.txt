/** 
  @defgroup FitsDataModel  FITS Data Model
  @author Reiner Rohlfs UGE
  
  @brief Module to generate C++ source code to access data in FITS files.
    
  This module
  - provides the program to generate the C++ source code, which can be used
    to create, to read and to write FITS extensions. 
  - uses that program to generate the C++ source code from FITS Schema 
    Definition files (*.fsd).
  - provides a second program that generates C++ to Python bindings which can be
    used to create, read and write FITS extensions in Python.
    
  The FITS Schema Definition files are documents in XML format to define 
  completely the structure of a FITS extension, either a FITS image or a 
  FITS binary table. These files have to be located in the resources 
  sub-directory. 
  
  Invoking @b make @b install will 
  - create the fits_data_model program 
  - create the source code for each fsd file, that is located
    in the resource sub-directory
  - compile that source code 
  - install the object files in a shared library at 
    $CHEOPS_SW/lib/libfits_data_model.dylib  
    
    
  - create the py_fits_data_model program
  - run this program to create a C++ source file containing C++ to Python
    bindings for all data structures defined in the fsd files
  - build a shared library, containing a Python extension module, from the 
    bindings and install it at
    $CHEOPS_SW/lib/libpy_fits_data_model.dylib
  - install the python module fits_data_model, which includes
    the extension module, in $CHEOPS_SW/python/
    
  <h2> Naming convention </h2>
    
  <h3> Data structure name </h3>
  The data structure name is composed of 3 items, separated by an underline(_) :
  @b source_processing_description
  - @b source defines the origin of the data. This can be
       - @b SCI science data from the payload
       - @b BUS housekeeping data of the platform
       - @b AUX auxiliary data from MOC
       - @b MPS data generated by the mission planning system
       - @b PIP other data generated during the pipeline processes, for example the date of the reports.
       - @b REF reference data, obtained from ground based calibrations
       - @b EXT external delivery, for example catalogues or proposals
  - @b processing defines the already applied processing step. This can be
       - @b PRW  preliminary raw data, as received from MOC
       - @b RAW  raw data, output of preprocessing
       - @b CAL  calibrated data, intermediate step of data reduction
       - @b COR  corrected data, output of data reduction   
       - @b REP  report data, used to generate the reports
       - @b PRE  predicted data
       - @b APP  approved external data
  - @b description is a short description of the type of data. This can be
       - @b FullArray an image of the full CCD (1024 X 1024 pixels)
       - @b SubArray200 an image of a fraction of the CCD (200 X 200 pixels)
       - @b ImageMetadata a table describing meta data of the images
       - @b Lightcurve a light curve (a data level 2 product)
       - @b Housekeeping housekeeping data either from the payload or the platform	
       - @b Visits attributes of a planned visit
       - @b Proposals attributes of proposals and their observations 
       - @b Text text data, used for the report generation
       - @b PSF a n-dimensional cube, describing the PSF of CHEOPS
       - @b StarCatalog, a catalog of stars
       
    
  <h2> The FITS Schema Definition (FSD) file </h2>
  
  <h3> 1. The root element </h3>
  The root element of each FITS schema is \<FITS_schema\>:\n
 
  <pre>
	\<?xml version="1.0" encoding="UTF-8"?\>
    \<FITS_schema xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
             xsi:noNamespaceSchemaLocation="fits_data_model_schema.xsd"\>
	...  
	...
	\</FITS_schema\>
  </pre>

  <h3> 2. The \<HDU\> element </h3>
  There has to be exactly 1 \<HDU\> element per \<FITS_schema\> tag. 
  The \<HDU\> element has to have one attribute: extname 

  <pre>
	\<FITS_schemaxmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
             xsi:noNamespaceSchemaLocation="fits_data_model_schema.xsd"\>
		\<HDU extname="extension_name"\> 
			...
			...
		\</HDU\>
	\</FITS_schema\>
  </pre>

  The HDU element has exactly 4 child-elements: 
  - The first is \<brief\>\</brief\>. Its text should be a brief
    description of the data structure, typically one line.
  - The second is \<descrioption\>\</descriptioin\>. Its text should describe
    in more detail the FITS extension. It can / should be several lines.
  - The third is always \<header\> \</header\> 
  - the fourth element is either \<table\> \</table\> or \<image\> \</image\>. 
  
  The \<header\> and the
  \<table\> elements have no attribute, the \<image\> element has one 
  attribute, see below.

  <h3> 3. The \<header\> element and its child-element \<keyword\> </h3>
  The \<header\> element can have any number of \<keyword\> child-elements. 
  The \<keyword\> element can have up to 5 attributes: 
	- @b name (mandatory) defines the name of the header keyword. The maximum 
	     length of its value is 8 characters. It has to be a unique name per 
	     \<header\>, excepted for the names "COMMENT" and "HISTORY".
	- @b default (optional) defines the default value of the header keyword. 
	     If data_type="boolean" it can be either "T" or "F" ("T" is the default). 
	- @b data_type (optional) defines the data type of the value of the 
	     keyword. It can be "string", "integer", "real" or "boolean". 
	     The default is 'string".
	- @b comment (optional, but recommended) defines the comment of the 
	     header keyword
	- @b unit (optional) defines the physical unit of the keyword value. 

  \<keyword\> elements can be grouped. The groups of keywords will be separated
  in the FITS header by three lines. The middle line will hold the description
  of the group.
  Some examples:
  <pre>
	\<header\>
		\<keyword name="MIN_EXAM" /\>
		\<keyword name="STD_EXAM" comment="a typical example" /\>
		\<keyword name="FULL_EXM" default="3.4" data_type="real"          
                     comment="a full example" unit="keV" /\>
		<group description="short description or title of the group" \>
			\<keyword name ="OBTIME" data_type="integer" comment="On Board Time"/\>
			\<keyword name="BJD" data_type="real" comment="baricentric  Julian Day"/\>
		\</group\>		
	\</header\>
  </pre>
  Note: All keywords outside of a group have to be placed before the first group!

  
  <h3> 4. The \<table\> element and its child-element \<column\> </h3>
  The \<table\> element can have up to 999 \<column\> child-elements. 
  The \<column\> element has up to 6 attributes:
    - @b name (mandatory) defines the name of the column. It has to follow the 
         restrictions of the FITS standard and has to be unique per \<table\>
    - @b data_type (mandatory) defines the data type of the values in the 
         column. Its value has to be one of this list: 
         - "A" or "string" : ASCII string
         - "L" or "bool"   : boolean
         - "S" or "int8"   : signed 1 byte integer
         - "B" or "uint8"  : unsigend 1 byte integer
         - "I" or "int16"  : signed 2 byte integer
         - "U" or "uint16" : unsigend 2 byte integer
         - "J" or "int32"  : signed 4 byte integer
         - "V" or "uint32" : unsigned 4 byte integer
         - "K" or "int64"  : signed 8 byte integer
         - "W" or "uint64" : unsigend 8 byte integer (attention: not supported by cfitsio)
         - "E" or "float"  : 4 byte float
         - "D" or "double" : 8 byte double
	- @b bin_size (optional) defines the number of values per column cell that 
	     can be stored in the column. For string columns (data_type="A" or "string") 
	     it defines the maximum number of characters that can be stored in a cell. 
	     The default value is "1"
	- @b null (optional) defines the NULL value of an integer column. It has to
	     be in the range of the integer data type of the column. \n
	     Note: bool columns cannot have a NULL value.\n
	     The NULL value of a string value is always an empty string "". This 
	     cannot be overwritten by this attribute.\n 
	     The NULL value of float and double is always NaN. This cannot be
	     overwritten by this attribute.\n
	     The null value, defined by this attribute, is ignored for bool, 
	     string, float and double columns.     
	- @b unit (optional) defines the physical unit of the data in the column.
	- @b comment (optional, but recommended) defines the comment of the column.

Some examples:
  
  <pre>
	\<table\>
		\<column  name="STRING_COL" data_type="A" bins_size="20" /\>
		\<column  name="NUMBER" data_type="int16" null="32767" comment="running number" /\>
		\<column  name="DOUBLE_COLUMN" data_type="D" unit="sec" bin_size="325"  
                  comment="comment of the column" /\>
	\</table\>
  </pre>
  
  <h3> 5.The \<image\> element and its child-elements </h3>
  The \<image\> element has up to 2 attributes and up to 10 child-elements. 
  The attributes are 
	- @b data_type (mandatory). defines the data type of the pixel values. 
	     Its value can be 
        - "B" or "uint8"   : unsigend 1 byte integer
        - "I" or "int16"   : signed 2 byte integer
        - "U" or "uint16"  : unsigend 2 byte integer
        - "J" or "int32"   : signed 4 byte integer
        - "V" or "uint32"  : unsigned 4 byte integer
        - "K" or "int64"   : signed 8 byte integer
        - "E" or "float"   : 4 byte float
        - "D" or "double"  : 8 byte double
    - @b null (optional)  defines the NULL value of a pixel in the image. It has
	     to be in the range of the integer data type of the image pixels. \n
	     Note: The NULL value of float and double pixels is always NaN. This 
	     cannot be overwritten by this attribute.\n
	     The NULL value, defined by this attribute, is ignored for float and 
	     double images.     

	The child-elements are
	- @b naxis (mandatory). It defines with its text the number of axis of 
	     the image. It can be in the range from 0 to 9.
	- @b axis1 (mandatory if naxis >= 1). It defines the size of first axis. 
	     Set the value to 0, to define the size at runtime.
	- @b axis2 (mandatory if naxis >= 2).  Description see "axis1"
	- @b axis3 (mandatory if naxis >= 3).  Description see "axis1"
	- @b axis4 (mandatory if naxis >= 4).  Description see "axis1"
	- @b axis5 (mandatory if naxis >= 5).  Description see "axis1"
	- @b axis6 (mandatory if naxis >= 6).  Description see "axis1"
	- @b axis7 (mandatory if naxis >= 7).  Description see "axis1"
	- @b axis8 (mandatory if naxis >= 8).  Description see "axis1"
	- @b axis9 (mandatory if naxis == 9).  Description see "axis1"

  The \<axis1\> to \<axis9\> elements have 2 attributes:
	- @b comment (optional) describing the meaning of the corresponding axis
	- @b unit (optional) defining the physical unit of the data assigned to 
	     the corresponding axis.

  For example:
  <pre>
  	\<image data_type="int16" null="-32768"\>
		\<naxis\>3\</naxis\>
		\<axis1 comment="X axis of the CCD" unit="pixel"\>200\</axis1\>
		\<axis2 comment="Y axis of the CCD" unit="pixel"\>200\</axis2\>
		\<axis3 comment="wavelength" unit="nm">           0  \</axis3\>
	\</image\>
  </pre>
  
*/ 