
/** ****************************************************************************
 *  @file PyFitsDataModel.cxx
 *
 *  @ingroup FitsDataModel
 *  @brief Main function of the py_fits_data_model program.
 *
 *  @author Anja Bekkelien UGE
 *
 *  This program generates a Python binding for fits_data_model using Boost
 *  Python. The binding is a .cxx file that must be compiled into a shared
 *  library before it can be imported into a Python module.
 *
 *  The Python binding is created from .fsd files using the XSD-to-C++ binding
 *  generated by the XSD compiler.
 *
 *  @version 1.0 first released version
 *
 */

#include <stdexcept>
#include <iostream>
#include <string>

#include <vector>
#include <sstream>
#include <iterator>

#include <boost/filesystem.hpp>

#include "PyFitsDataModel.hxx"

using namespace std;

/** *****************************************************************************
 *  @ingroup common_sw_example
 *  @brief Main function of the py_fits_data_model program
 *
 *  @param [in] argc number of command line arguments
 *  @param [in] argv array of command line arguments
 *
 *  @return 0 if program terminates without error\n
 *          1 if program terminates with an error
 */
int main(int argc, char * argv[] ) {
  try {

    ParamsPtr progParams = CheopsInit(argc, argv);

    // the names of the .fsd files for which to generate Python bindings
    std::istringstream buf(progParams->GetAsString("input_files"));
    std::istream_iterator<std::string> beg(buf), end;
    std::vector<std::string> inputFiles(beg, end);

    // the names of the output files
    string outputCodeDir = progParams->GetAsString("output_code_dir");
    string outputDocDir = progParams->GetAsString("output_doc_dir");

    PyFitsDataModelExtension extension(progParams, inputFiles, outputCodeDir, outputDocDir);
    extension.create();

  }
  catch (exception & e) {
    cout << e.what() << endl;
    return 1;
  }

  return 0;
}

